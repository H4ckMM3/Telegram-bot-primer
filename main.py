import asyncio
from datetime import datetime, timezone
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from db import SessionLocal, due_habits_now, habits, init_db, users
from db import get_or_create_user

load_dotenv()
TOKEN = os.getenv('TOKEN')

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

scheduler = AsyncIOScheduler()
init_db()


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    session = SessionLocal()
    default_tz = user.tz
    user_id = message.from_user.id
    user = get_or_create_user(session, message.from_user.id, 'UTC', user_id, default_tz)
    welcome_text = f"""üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫.
    
    –ß—Ç–æ —è —É–º–µ—é:
    üìù –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
    ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–∏—Ö –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è

    """
    await message.answer(welcome_text)
    
@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    session = SessionLocal()
    help_text = """üÜò –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:
    /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /add - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
    /list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏
    /delete - –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
    """
    await message.answer(help_text)
    await session.commit()


class AddHabit(StatesGroup):
    name = State()
    time = State()

@dp.message_handler(commands=['add'])
async def cmd_add(message: types.Message):
    session = SessionLocal()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
    await AddHabit.name.set()
    await session.commit()
    await session.close()

@dp.message_handler(state=AddHabit.name)
async def process_name(message: types.Message, state: AddHabit.name):
    session = SessionLocal()
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM):")
    await state.time.set()
    await session.commit()
    await session.close()

@dp.message_handler(state=AddHabit.time)
async def process_time(message: types.Message, state: AddHabit.time):
    session = SessionLocal()
    await state.update_data(time=message.text)
    data = await state.get_data()
    name = data.get("name")
    time = data.get("time")
    await message.answer(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –≤ {time}.")
    await state.finish()
    await session.commit()
    await session.close()
    
@dp.message_handler(commands=['list'])
async def cmd_list(message: types.Message):
    session = SessionLocal()
    user_habits = get_or_create_user(session, message.from_user.id, 'UTC')
    habits = session.query(habits).filter_by(user_id=user_habits.id).all()
    if not habits:
        await message.answer("–ü—Ä–∏–≤—ã—á–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
    else:
        for habit in habits:
            await message.answer(f"–ü—Ä–∏–≤—ã—á–∫–∞: {habit.title}, –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {habit.remind_time}, –ê–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if habit.is_active else '–ù–µ—Ç'}")
        print(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_habits.tg_id}")
    await session.commit()
    await session.close()

@dp.message_handler(commands=['done'])
async def cmd_done(message: types.Message):
    session = SessionLocal()
    if message.reply_to_message:
        habit_id = message.reply_to_message.text.split()[1]
        habit = session.query(habits).filter_by(id=habit_id).first()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤—ã—á–∫–æ–π, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.")
        await message.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    habit.is_done = True
    await session.commit()
    await message.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    await session.commit()
    await session.close()
    
def tz_user(user_id):
    session = SessionLocal()
    user = session.query(users).filter_by(id=user_id).first()
    return user.tz if user else 'UTC'

async def check_habits(bot):
    utc_now = datetime.now(timezone.utc)
    with SessionLocal() as session:
        day_mask = (1 << utc_now.weekday())
        due_habits = due_habits_now(session, utc_now, day_mask)
        for habit in due_habits:
            user = session.query(users).filter_by(id=habit.user_id).first()
            if user:
                reminder_text = f"""‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:
                –ü—Ä–∏–≤—ã—á–∫–∞: {habit.title}
                –í—Ä–µ–º—è: {habit.remind_time}
                """
                await bot.send_message(chat_id=user.tg_id, text=reminder_text)
        print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è {len(due_habits)} –ø—Ä–∏–≤—ã—á–µ–∫.")
scheduler.add_job(check_habits, 'interval', minutes=1, args=[bot])
dp.start_polling(bot)